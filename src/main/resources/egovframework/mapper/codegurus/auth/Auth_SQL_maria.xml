<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed May 11 15:49:38 KST 2016-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="codegurus.auth.AuthDAO">

    <!-- 사용자 중복 체크 (회원가입 화면) -->
    <select id="selectUserDup" resultType="int">
        select /* selectUserDup */
            count(*)
        from user_manage um
        where user_id = #{username}
        and DELETE_ORNOT = 'N'
    </select>

    <!-- 사용자 등록 (회원가입) -->
    <insert id="insertRegisterInfo" useGeneratedKeys="true" keyProperty="userManageId">
        INSERT /* insertRegisterInfo */
        INTO user_manage
        (
            user_id,
            password,
            password_mask,
            name,
            birth,
            birth_year,
            gender,
            termofuse_agree_ornot,
            personalinfo_agree_ornot,
            promotion_agree_ornot,
            app_push_agree_ornot,
            <!-- locationinfo_agree_ornot, --><!-- 필요하면 사용  -->
            termofuse_agree_date,
            personalinfo_agree_date,
            promotion_agree_date,
            app_push_agree_date,
            <!-- locationinfo_agree_date, --><!-- 필요하면 사용  -->
            reg_id,
            reg_date,
            modify_id,
            modify_date
        )
        values
        (
           #{username},
           #{password},
           #{passwordMask},
           #{name},
           #{birth},
           SUBSTR(#{birth}, 1, 4),
           #{gender},
           #{termofuseAgreeOrnot},
           #{personalinfoAgreeOrnot},
           #{promotionAgreeOrnot},
           #{promotionAgreeOrnot},
           <!-- #{locationinfoAgreeOrnot}, -->
           <choose>
               <when test='termofuseAgreeOrnot != null and termofuseAgreeOrnot != "" and termofuseAgreeOrnot == "Y"'>CURRENT_TIMESTAMP,</when>
               <otherwise>null,</otherwise>
           </choose>
           <choose>
               <when test='personalinfoAgreeOrnot != null and personalinfoAgreeOrnot != "" and personalinfoAgreeOrnot == "Y"'>CURRENT_TIMESTAMP,</when>
               <otherwise>null,</otherwise>
           </choose>
           <choose>
               <when test='promotionAgreeOrnot != null and promotionAgreeOrnot != "" and promotionAgreeOrnot == "Y"'>CURRENT_TIMESTAMP,</when>
               <otherwise>null,</otherwise>
           </choose>
           <choose>
               <when test='promotionAgreeOrnot != null and promotionAgreeOrnot != "" and promotionAgreeOrnot == "Y"'>CURRENT_TIMESTAMP,</when>
               <otherwise>null,</otherwise>
           </choose>
           <!--
           <choose>
               <when test='locationinfoAgreeOrnot != null and locationinfoAgreeOrnot != "" and locationinfoAgreeOrnot == "Y"'>CURRENT_TIMESTAMP,</when>
               <otherwise>null,</otherwise>
           </choose>
           -->
           0, /* reg_id (아직 user_manage_id 가 없는 상태이기 때문에) */
           CURRENT_TIMESTAMP,
           0,
           CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 학부모 사용자 등록 (회원가입) -->
    <insert id="insertRegisterParentInfo" useGeneratedKeys="true" keyProperty="userManageId">
        INSERT /* insertRegisterParentInfo */
        INTO user_manage
        (
        user_id,
        password,
        password_mask,
        name,
        birth,
        birth_year,
        gender,
        cellphone,
        email,
        zipcode,
        address,
        address_detail,
        reg_id,
        reg_date,
        modify_id,
        modify_date
        )
        values
        (
        #{username},
        #{password},
        #{passwordMask},
        #{name},
        #{birth},
        SUBSTR(#{birth}, 1, 4),
        #{gender},
        #{cellphone},
        #{email},
        #{zipcode},
        #{address},
        #{addressDetail},
        0, /* reg_id (아직 user_manage_id 가 없는 상태이기 때문에) */
        CURRENT_TIMESTAMP,
        0,
        CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 사용자 권한 매핑 등록 -->
    <insert id="insertUserAuth" useGeneratedKeys="true" keyProperty="userAuthId">
        INSERT /* insertUserAuth */
        INTO user_auth
        (
            user_manage_id,
            auth_id
        )
        VALUES
        (
            #{userManageId},
            #{authId}
        )
    </insert>

    <!-- 사용자 권한 갯수 조회 -->
    <select id="selectUserAuthCount" resultType="int">
        SELECT /* selectUserAuthCount */
               COUNT(*)
        FROM user_auth
        INNER JOIN auth
        ON user_auth.AUTH_ID = auth.AUTH_ID
            AND user_auth.USER_MANAGE_ID = #{userManageId}
            AND user_auth.DELETE_ORNOT = 'N'
            AND auth.PRODUCT_ID = #{productId}
    </select>

    <!-- 체험회원 등록 -->
    <insert id="insertTrialRegister" useGeneratedKeys="true" keyProperty="trialManageId">
        INSERT /* insertTrialRegister */
        INTO trial_manage
        (
            product_id,
            name,
            birth,
            birth_year,
            gender,
            parents_name,
            parents_birth,
            parents_cellphone,
            zipcode,
            address,
            address_detail,
            trial_start_date,
            trial_end_date
        )
        VALUES
        (
            #{productId},
            #{name},
            #{birth},
            SUBSTR(#{birth}, 1, 4),
            #{gender},
            #{parentName},
            #{parentBirth},
            #{parentCellphone},
            #{zipcode},
            #{address},
            #{addressDetail},
            #{trialStartDate},
            #{trialEndDate}
        )
    </insert>

    <!-- 체험회원 정보 조회 -->
    <select id="selectTrialUser" resultType="ResTrialUserVO">
        SELECT /* selectTrialUser */
            trial_manage_id,
            product_id,
            name,
            birth,
            birth_year,
            gender,
            parents_name as parentName,
            parents_birth as parentBirth,
            parents_cellphone as parentCellphone,
            zipcode,
            address,
            address_detail as addressDetail,
            DF14(trial_start_date) as trial_start_date,
            DF14(trial_end_date) as trial_end_date,
            trial_status_code,
            reg_date,
            delete_ornot,
            if(DF14(NOW()) <![CDATA[ <= ]]> DF14(trial_end_date), 'Y', 'N') as validPeriod
        FROM
            trial_manage tm
        WHERE trial_manage_id = #{value}
          AND trial_status_code = '00'
          AND delete_ornot = 'N'
    </select>


    <!-- SMS 인증 insert -->
    <insert id="insertSmsCert" useGeneratedKeys="true" keyProperty="smsCertId">
        INSERT /* insertSmsCert */
        INTO sms_cert
        (
            sms_type,
            name,
            cellphone,
            cert_number
        )
        values
        (
            #{smsType},
            #{name},
            #{cellphone},
            #{certNumber}
        )
    </insert>

    <!-- SMS 인증 조회 -->
    <select id="selectSmsCert" resultType="LHMap">
        SELECT /* selectSmsCert */
            sms_cert_id,
            sms_type,
            name,
            cellphone,
            cert_number,
            cert_req_date,
            if(NOW() > DATE_ADD(cert_req_date, INTERVAL 3 MINUTE), 'Y', 'N') as timeoutYN
        FROM
            sms_cert
        WHERE sms_cert_id = #{smsCertId}
    </select>

    <!-- SMS 인증 update -->
    <update id="updateSmsCert">
        UPDATE /* updateSmsCert */
            sms_cert
        SET
            cert_success_date = CURRENT_TIMESTAMP
        WHERE sms_cert_id = #{smsCertId}
    </update>

    <!-- ID 찾기 -->
    <select id="selectUserId" resultType="String">
        select /* selectUserId */
            user_id
        from user_manage
        where name = #{name}
        and birth = #{birth}
        and delete_ornot = 'N'
        limit 1
    </select>

    <!-- 패스워드 찾기 -->
    <select id="selectUserPassword" resultType="UserVO">
        SELECT /* selectUserPassword */
            user_manage_id,
            password_mask
        FROM user_manage
        WHERE user_id = #{username}
        AND name = #{name}
        AND birth = #{birth}
        AND delete_ornot = 'N'
    </select>

    <!-- 가족관계가 매핑이 되어 있는 상태이면 Y, 관계가 없으면 N 리턴 -->
    <select id="selectConnectedFamilyYN" resultType="String">
        SELECT
            if(count(*) > 0, 'Y', 'N') as connected
        FROM family_relation fr
        WHERE user_manage_id = #{userManageId}
        AND user_manage_family_id = #{userManageFamilyId}
        AND delete_ornot = 'N'
    </select>

    <!-- 가족관계 매핑 등록 -->
    <insert id="insertFamilyRelation" useGeneratedKeys="true" keyProperty="familyRelationId">
        INSERT /* insertFamilyRelation */
        INTO family_relation
        (
            user_manage_id,
            user_manage_family_id,
            relation_code
        )
        VALUES
        (
            #{userManageId},
            #{userManageFamilyId},
            #{relationCode}
        )
    </insert>

    <!-- 학부모의 자녀 회원 조회 -->
    <select id="selectChildrenByParent" resultType="ChildInfoVO">
        SELECT /* selectChildrenByParent */
            b.user_manage_id,
            b.user_id as username,
            b.name,
            b.birth,
            d.auth_title
        FROM family_relation a, -- 가족관계
             user_manage b, -- 사용자 관리
             user_auth c, -- 사용자-권한 매핑
             auth d -- 권한
        WHERE a.user_manage_family_id = #{value} -- 학부모의 user_manage_id
        AND a.relation_code = 'PARENT' -- 관계: 학부모
        AND a.user_manage_id = b.user_manage_id
        AND b.user_manage_id = c.user_manage_id
        AND (c.user_status_code = '00' or c.user_status_code = '01')
        AND c.auth_id = d.auth_id
        AND a.delete_ornot = 'N'
        AND b.delete_ornot = 'N'
        AND c.delete_ornot = 'N'
        AND d.delete_ornot = 'N'
    </select>

    <!-- 정회원 인증 전 계약내용 조회 -->
    <select id="selectContractInfo" resultType="ResContractInfoElemVO">
        SELECT /* selectContractInfo */
             intg_edu_cntr_id
            ,intg_cust_id
            ,intg_parent_cust_id
            ,a.intg_subj_id
            ,a.edu_cntr_oid
            ,a.sap_cust_id
            ,a.sap_subj_id
            ,edu_stat_cd
            ,edu_stat_cd_nm
            ,cust_nm as name
            ,parent_cust_nm as parentName
            ,intg_prodt_id /* SAP 데이터가 거의 없음 */
            ,prodt_nm
            ,d.product_id
            ,b.sap_subject_title
            ,d.product_name as service_title
            ,c.subject_title
            ,svc_chag_date
        FROM svc_mh_edu_cntr_cp a, online_subject_sap_mapping b, online_subject c, product d
        WHERE cust_nm = #{name}
        AND birthdt  = #{birth}
        AND parent_cust_nm = #{parentName}
        AND parent_birthdt = #{parentBirth}
        AND parent_handphone = #{parentCellphone}
        AND a.sap_subj_id = b.sap_subject_id
        -- AND a.intg_subj_id = b.intg_subj_id -- 구버전
        AND b.online_subject_id = c.online_subject_id
        <if test='productId != null and productId != ""'>
            AND c.product_id = #{productId}
        </if>
        AND c.product_id = d.product_id
        AND a.delete_ornot = 'N'
        AND a.edu_stat_cd = 'DA21010'
        GROUP BY edu_cntr_oid
    </select>

    <!-- 정회원 인증 정보 조회 -->
    <select id="selectUserSubjectCount" resultType="int">
        SELECT /* selectUserSubjectCount */
            COUNT(*)
        FROM user_subject
        WHERE edu_cntr_oid = #{eduCntrOid}
            AND user_manage_id = #{userManageId}
            AND delete_ornot = 'N'
    </select>

    <!-- 온라인과목SAP매핑 조회 (오프라인과목 전체목록 조회) -->
    <select id="selectOnlineSubjectSapMappingList" resultType="LHMap">
        select /* selectOnlineSubjectSapMappingList */
            online_subject_sap_mapping.online_subject_sap_mapping_id,
            online_subject_sap_mapping.online_subject_id,
            online_subject_sap_mapping.intg_subj_id,
            online_subject_sap_mapping.sap_subject_id,
            online_subject_sap_mapping.sap_subject_code,
            online_subject_sap_mapping.sap_subject_title,
            online_subject_sap_mapping.use_ornot,
            online_subject_sap_mapping.reg_id,
            online_subject_sap_mapping.reg_date,
            online_subject_sap_mapping.modify_id,
            online_subject_sap_mapping.modify_date,
            online_subject_sap_mapping.delete_ornot
        from online_subject_sap_mapping
        inner join online_subject
        ON online_subject_sap_mapping.ONLINE_SUBJECT_ID = online_subject.ONLINE_SUBJECT_ID
           and online_subject_sap_mapping.use_ornot = 'Y'
           and online_subject_sap_mapping.delete_ornot = 'N'
            <if test='productId != null and productId != ""'>
                AND online_subject.PRODUCT_ID = #{productId}
            </if>
    </select>

    <!-- 교육계약 테이블 사본 insert -->
    <insert id="insertEduCntrCp">
        INSERT /* insertEduCntrCp */
        INTO svc_mh_edu_cntr_cp
        (
        cust_nm,
        birthdt,
        sap_cust_id,
        edu_stat_cd,
        edu_stat_cd_nm,
        edu_cntr_oid,
        parent_cust_nm,
        parent_birthdt,
        parent_handphone,
        parent_sap_cust_id,
        sap_subj_id,
        reg_date,
        batch_exec_date,
        delete_ornot
        )
        VALUES
        (
        #{CUST_NM},
        #{BIRTHDT},
        #{SAP_CUST_ID},
        #{EDU_STAT_CD},
        #{EDU_STAT_CD_NM},
        #{EDU_CNTR_OID},
        #{PARENT_CUST_NM},
        #{PARENT_BIRTHDT},
        #{PARENT_HANDPHONE},
        #{PARENT_SAP_CUST_ID},
        #{SAP_SUBJ_ID},
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        'N'
        )
    </insert>

    <!-- 정회원 인증 (사용자과목 insert) -->
    <insert id="insertUserSubject">
        INSERT /* insertUserSubject */
        INTO user_subject
        (
            user_manage_id,
            intg_edu_cntr_id,
            intg_cust_id,
            intg_subj_id,
            edu_cntr_oid,
            sap_cust_id,
            sap_subj_id,
            reg_id,
            modify_id
        )
        VALUES
        (
            #{userManageId},
            #{intgEduCntrId},
            #{intgCustId},
            #{intgSubjId},
            #{eduCntrOid},
            #{sapCustId},
            #{sapSubjId},
            #{regId},
            #{regId}
        )
		ON DUPLICATE KEY
		UPDATE
            delete_ornot = 'N', /* 삭제 복구 */
			modify_id   = #{regId},
			modify_date = CURRENT_TIMESTAMP
    </insert>

    <!-- 해당 사용자와 계약되어 있는 오프라인과목 목록을 리턴한다. -->
    <select id="selectUserSubjectList" resultType="String">
        SELECT /* selectUserSubjectList */
            intg_edu_cntr_id
        FROM user_subject
        WHERE user_manage_id = #{value}
    </select>

	<!-- 온라인과목정보 프로시저 호출 -->
	<select id="callGetOnlineSubjInfo" statementType="CALLABLE" resultType="LHMap">
		{
			CALL GET_ONLINE_SUBJ_INFO(
				#{intgEduCntrId},
				#{productId, mode=OUT, jdbcType=INTEGER},
				#{onlineSubjectId, mode=OUT, jdbcType=INTEGER},
				#{month, mode=OUT, jdbcType=VARCHAR},
				#{eduStatCd, mode=OUT, jdbcType=VARCHAR}
			)
		}
	</select>

    <!-- 사용자 권한 변경 -->
    <update id="updateUserAuth">
        UPDATE /* updateUserAuth */
            user_auth
        SET
            auth_id = #{authId},
            MODIFY_ID = #{modifyId},
            MODIFY_DATE = CURRENT_TIMESTAMP
        WHERE user_auth_id = (
            SELECT
                user_auth_id
            FROM user_auth a, auth b
            WHERE user_manage_id = #{userManageId}
            AND a.auth_id = b.auth_id
            AND b.product_id = #{productId}
        )
    </update>

    <!-- 정회원인증시, 정회원인증에 불필요한 UI에 입력된 필드들을 학생회원 레코드에 임시 저장한다. (어떻게 사용할지는 추후 논의) -->
    <update id="updateUserInfoByFullmemberAuth">
        update /* updateUserInfoByFullmemberAuth */
            user_manage
        set
             cellphone = #{parentCellphone}
            ,email = #{email}
            ,zipcode = #{zipcode}
            ,address = #{address}
            ,address_detail = #{addressDetail}
        where user_manage_id = #{userManageId}
    </update>

    <update id="updateTrialManageId">
        UPDATE /* updateTrialManageId */
            user_manage
        SET
            trial_manage_id = #{trialManageId}
        WHERE user_id = #{username}
          and delete_ornot = 'N'
    </update>

    <update id="deleteAppPushToken">
        UPDATE /* deleteAppPushToken */
            app_push_token
        SET
            delete_ornot = 'Y'
            , modify_id = #{userManageId}
        WHERE push_token = #{pushToken}
          and client_type = #{clientType}
          and delete_ornot = 'N'
    </update>

    <insert id="insertAppPushToken">
        INSERT /* insertAppPushToken */
        INTO app_push_token
        (
            user_manage_id,
            push_token,
            client_type,
            reg_id,
            modify_id
        )
        VALUES
        (
            #{userManageId},
            #{pushToken},
            #{clientType},
            #{userManageId},
            #{userManageId}
        )
    </insert>

    <!-- 회원의 상품별 스케줄 간격을 가져온다 -->
    <select id="selectScheduleInterval" resultType="int">
        SELECT /* selectScheduleInterval */
            IFNULL(MAX(`value`), 0) AS `value`
        FROM schedule_interval
        WHERE delete_ornot = 'N'
          and user_manage_id = #{userManageId}
          and product_id = #{productId}
    </select>

    <!-- 회원의 상품별 스케줄 간격을 삭제 -->
    <update id="deleteScheduleInterval">
        UPDATE /* deleteScheduleInterval */
            schedule_interval
        SET
            delete_ornot = 'Y'
          , modify_id = #{userManageId}
          , modify_date = CURRENT_TIMESTAMP
        WHERE user_manage_id = #{userManageId}
          and product_id = #{productId}
    </update>

    <!-- 회원의 상품별 스케줄 간격을 입력 -->
    <insert id="insertScheduleInterval">
        INSERT /* insertScheduleInterval */
        INTO schedule_interval
        (
            user_manage_id,
            product_id,
            `value`,
            reg_id,
            modify_id
        )
        VALUES
        (
            #{userManageId},
            #{productId},
            #{value},
            #{userManageId},
            #{userManageId}
        )
    </insert>

    <!-- 스케줄 표시할때 필요한 계약정보 조회 -->
    <select id="selectScheduleInfo" resultType="ScheduleInfoVO">
        SELECT /* selectScheduleInfo */
            user_manage.USER_ID
            , user_manage.user_manage_id
            , user_manage.BIRTH
            , user_auth.USER_STATUS_CODE
            , auth.PRODUCT_ID
            , auth.AUTH_CODE
            , svc_mh_edu_cntr_cp.EDU_STAT_CD
            , svc_mh_edu_cntr_cp.EDU_STAT_CD_NM
            , ADDDATE(STR_TO_DATE(svc_mh_edu_cntr_cp.NO_CLASS_CHAG_DT, '%Y%m%d'), -1) AS NO_CLASS_CHAG_DT
            , IFNULL(schedule_interval.`value`, 0) AS `value`
            , user_subject.SAP_SUBJ_ID
        FROM user_manage
        INNER JOIN user_auth
            ON user_manage.USER_MANAGE_ID = user_auth.USER_MANAGE_ID
            AND user_manage.DELETE_ORNOT = 'N'
            AND user_auth.DELETE_ORNOT = 'N'
            AND user_manage.user_manage_id = #{userManageId}
        INNER JOIN auth
            ON user_auth.AUTH_ID = auth.AUTH_ID
            AND auth.PRODUCT_ID = #{productId}
            AND auth.AUTH_CODE = '01'
        INNER JOIN user_subject
            ON user_manage.USER_MANAGE_ID = user_subject.USER_MANAGE_ID
            AND user_subject.DELETE_ORNOT = 'N'
            AND user_subject.ACTIVE_ORNOT = 'Y'
        INNER JOIN online_subject_sap_mapping
            ON online_subject_sap_mapping.SAP_SUBJECT_ID = user_subject.SAP_SUBJ_ID
        INNER JOIN online_subject
            ON online_subject.ONLINE_SUBJECT_ID = online_subject_sap_mapping.ONLINE_SUBJECT_ID
            AND online_subject.PRODUCT_ID = #{productId}
        LEFT JOIN svc_mh_edu_cntr_cp
            ON svc_mh_edu_cntr_cp.edu_cntr_oid = user_subject.edu_cntr_oid
            AND svc_mh_edu_cntr_cp.DELETE_ORNOT = 'N'
        LEFT JOIN schedule_interval
            ON user_manage.USER_MANAGE_ID = schedule_interval.user_manage_id
            AND schedule_interval.delete_ornot = 'N'
            AND schedule_interval.product_id = #{productId}
        GROUP BY user_subject.SAP_SUBJ_ID
    </select>

    <!-- 사용자 과목 유효 수정 -->
    <update id="updateUserSubjectActive">
        UPDATE /* updateUserSubjectActive */
            user_subject
        SET
            user_subject.ACTIVE_ORNOT = if(user_subject.edu_cntr_oid = #{eduCntrOid}, 'Y', 'N')
          , modify_id = #{userManageId}
          , modify_date = CURRENT_TIMESTAMP
        WHERE
                user_subject.edu_cntr_oid IN (
                SELECT user_subject.edu_cntr_oid
                FROM user_subject, online_subject_sap_mapping, online_subject
                   , (
                    SELECT user_subject.user_manage_id, online_subject.PRODUCT_ID
                    FROM user_subject, online_subject_sap_mapping, online_subject
                    WHERE user_subject.edu_cntr_oid = #{eduCntrOid}
                      AND user_subject.delete_ornot = 'N'
                      AND user_subject.SAP_SUBJ_ID = online_subject_sap_mapping.SAP_SUBJECT_ID
                      AND online_subject_sap_mapping.ONLINE_SUBJECT_ID = online_subject.ONLINE_SUBJECT_ID
                    GROUP BY user_subject.edu_cntr_oid
                ) A
                WHERE user_subject.user_manage_id = A.user_manage_id
                  AND user_subject.delete_ornot = 'N'
                  AND user_subject.SAP_SUBJ_ID = online_subject_sap_mapping.SAP_SUBJECT_ID
                  AND online_subject_sap_mapping.ONLINE_SUBJECT_ID = online_subject.ONLINE_SUBJECT_ID
                  AND online_subject.PRODUCT_ID = A.PRODUCT_ID
                GROUP BY user_subject.edu_cntr_oid
            )
    </update>

    <!-- 서버 데이터 삭제 -->
    <update id="deleteServerData">
        UPDATE /* deleteServerData */
            server_data
        SET
            delete_ornot = 'Y'
          , modify_id = #{userManageId}
          , modify_date = CURRENT_TIMESTAMP
        WHERE
              `key` = #{key}
          AND user_manage_id = #{userManageId}
    </update>

    <!-- 서버 데이터 등록 -->
    <insert id="insertServerData">
        INSERT /* insertServerData */
        INTO server_data
        (
            user_manage_id,
            `key`,
            `value`,
            reg_id,
            modify_id
        )
        VALUES
        (
            #{userManageId},
            #{key},
            #{value},
            #{userManageId},
            #{userManageId}
        )
    </insert>

    <!-- 서버 데이터 조회 -->
    <select id="selectServerData" resultType="ServerDataVO">
        SELECT /* selectServerData */
            `key`
            , `value`
        FROM server_data
        WHERE
            `key` = #{key}
          AND user_manage_id = #{userManageId}
        ORDER BY reg_date DESC
        LIMIT 1
    </select>


    <!-- 개인정보 동의 update -->
    <update id="updateAgree">
        UPDATE /* updateAgree */
            user_manage
        SET
            termofuse_agree_ornot = #{termofuseAgreeOrnot},
            personalinfo_agree_ornot = #{personalinfoAgreeOrnot},
            promotion_agree_ornot = #{promotionAgreeOrnot},
            <choose>
                <when test='termofuseAgreeOrnot != null and termofuseAgreeOrnot != "" and termofuseAgreeOrnot == "Y"'>termofuse_agree_date = CURRENT_TIMESTAMP,</when>
                <otherwise>null,</otherwise>
            </choose>
            <choose>
                <when test='personalinfoAgreeOrnot != null and personalinfoAgreeOrnot != "" and personalinfoAgreeOrnot == "Y"'>personalinfo_agree_date = CURRENT_TIMESTAMP,</when>
                <otherwise>null,</otherwise>
            </choose>
            <choose>
                <when test='promotionAgreeOrnot != null and promotionAgreeOrnot != "" and promotionAgreeOrnot == "Y"'>promotion_agree_date = CURRENT_TIMESTAMP</when>
                <otherwise>null,</otherwise>
            </choose>
        WHERE user_id = #{username}
    </update>

</mapper>